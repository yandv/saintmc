package tk.yallandev.saintmc.bukkit.exploit.register;

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerQuitEvent;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;

import lombok.Getter;
import tk.yallandev.saintmc.CommonGeneral;
import tk.yallandev.saintmc.bukkit.BukkitMain;
import tk.yallandev.saintmc.bukkit.exploit.Exploit;

public class PacketLimiterExploit implements Exploit {

//	private Map<PacketType, Integer> limiterMap;
	private Map<Player, PacketInfo> table;

	public PacketLimiterExploit() {
		table = new HashMap<>();
//		limiterMap = new HashMap<>();
//
//		limiterMap.put(PacketType.Play.Client.WINDOW_CLICK, 100);
//		limiterMap.put(PacketType.Play.Client.USE_ENTITY, 150);
//		limiterMap.put(PacketType.Play.Client.ENTITY_ACTION, 250);
//		limiterMap.put(PacketType.Play.Client.UPDATE_SIGN, 5);
//		limiterMap.put(PacketType.Play.Client.TAB_COMPLETE, 50);
//		limiterMap.put(PacketType.Play.Client.FLYING, 900);
//		limiterMap.put(PacketType.Play.Client.POSITION_LOOK, 900);
//		limiterMap.put(PacketType.Play.Client.SETTINGS, 60);
//		limiterMap.put(PacketType.Play.Client.ABILITIES, 50);
//		limiterMap.put(PacketType.Play.Client.CUSTOM_PAYLOAD, 30);
	}

	@Override
	public void register() {
//		ProtocolLibrary.getProtocolManager().addPacketListener(
//				new PacketAdapter(BukkitMain.getInstance(), ListenerPriority.LOWEST, limiterMap.keySet()) {
//					@Override
//					public void onPacketReceiving(PacketEvent event) {
//						if (event.getPlayer() == null) {
//							event.setCancelled(true);
//							return;
//						}
//
//						if (table.containsKey(event.getPlayer())) {
//							PacketInfo packetInfo = table.get(event.getPlayer());
//
//							if (packetInfo.map.containsKey(event.getPacketType())) {
//								Entry<Long, Integer> entry = packetInfo.map.get(event.getPacketType());
//
//								if (entry.getKey() < System.currentTimeMillis()) {
//									if (entry.getValue() > limiterMap.get(event.getPacketType())) {
//										disconnect(event.getPlayer(), "Too many packets "
//												+ NameUtils.formatString(event.getPacketType().name()), false);
//										System.out.println(entry.getValue() + " - " + event.getPacketType().name());
//									}
//
//									packetInfo.map.put(event.getPacketType(),
//											new AbstractMap.SimpleEntry<Long, Integer>(
//													System.currentTimeMillis() + 1000, 0));
//									return;
//								}
//
//								entry.setValue(entry.getValue() + 1);
//							} else
//								packetInfo.map.put(event.getPacketType(), new AbstractMap.SimpleEntry<Long, Integer>(
//										System.currentTimeMillis() + 1000, 0));
//						} else {
//							table.put(event.getPlayer(), new PacketInfo());
//						}
//					}
//				});

		ProtocolLibrary.getProtocolManager().addPacketListener(new PacketAdapter(BukkitMain.getInstance(),
				ListenerPriority.LOWEST, PacketType.Play.Client.WINDOW_CLICK) {
			@Override
			public void onPacketReceiving(PacketEvent event) {
				if (event.getPlayer() == null)
					return;

				if ((int) event.getPacket().getModifier().getValues().get(1) >= 100) {
					disconnect(event.getPlayer(), "Netty 2", true);
					event.setCancelled(true);
					CommonGeneral.getInstance()
							.debug(event.getPlayer().getName() + " tried to crash the server with netty 2!");
				}
			}
		});

		Bukkit.getPluginManager().registerEvents(new Listener() {

			@EventHandler
			public void onPlayerQuit(PlayerQuitEvent event) {
				if (table.containsKey(event.getPlayer()))
					table.remove(event.getPlayer());
			}

		}, BukkitMain.getInstance());
	}

	@Getter
	public class PacketInfo {

		private Map<PacketType, Entry<Long, Integer>> map;

		public PacketInfo() {
			map = new HashMap<>();
		}

	}

}
